{"version":3,"sources":["script.js"],"names":[],"mappings":"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","file":"script-compiled.js","sourcesContent":["class TaskList {\n    constructor() {\n        this.userId = undefined;\n        this.tasks = [];\n    }\n\n    addTask() {\n        /**\n         * POST: json = {'user_id': 'number', taskText = 'string'}\n         * GET:\n         * if OK = true: json = {'ok': 'boolean', 'task_id': 'number'}\n         * if OK = false: json = {'ok': 'boolean', 'error_code': 'number' or null,\n         * 'error_message': 'string' or null}\n         */\n        const list = this;\n        if (document.getElementById(\"task_input_field\").value) {\n            let taskText = document.getElementById(\"task_input_field\").value;\n            document.getElementById(\"task_input_field\").value = \"\";\n            let sendData = {'userId': this.userId, 'taskText': taskText};\n\n            function add(answer) {\n                if (answer['ok'] === true) {\n                    let taskId = answer['task_id'];\n                    let newTask = new Task(taskId, taskText);\n\n                    list.tasks.push(newTask);\n\n                    list.updateDom();\n                }\n            }\n            knock_knock('save', sendData, add);\n        }\n    }\n\n    finishTask(node) {\n        /**\n         * POST: json = {'task_id': 'number', 'status': 'boolean'}\n         * GET:\n         * if OK = true: json = {'ok': true}\n         * if OK = false: json = {'ok': 'boolean', 'error_code': 'number' or null,\n         * 'error_message': 'string' or null}\n         */\n        const list = this;\n        node.status = node.status === false;\n        let sendData = {\"taskId\": node.id, \"status\": node.status};\n\n        function finish(answer) {\n            if (answer['ok'] === true) {\n                list.updateDom();\n            }\n        }\n        knock_knock('finish_task', sendData, finish);\n    }\n\n    removeTask(node) {\n        /**\n         * POST: {taskId: 'number'}\n         * GET:\n         * if OK = true: json = {'ok': true}\n         * if OK = false: json = {'ok': 'boolean', 'error_code': 'number' or null,\n         * 'error_message': 'string' or null}\n         */\n        const list = this;\n        let sendData = {'taskId': node.id}\n\n        function remove(answer) {\n            if (answer['ok'] === true) {\n                list.tasks.splice(list.tasks.indexOf(node), 1);\n                list.updateDom();\n            }\n        }\n        knock_knock('delete', sendData, remove);\n    }\n\n    updateDom() {\n        let tasksParent = document.getElementById(\"tasks\");\n        let existTasks = document.getElementsByClassName(\"task\");\n        let i = 0;\n\n        for (i; i < this.tasks.length; i++) {\n            if (existTasks[i]) {\n                this.tasks[i].replaceTaskNode(existTasks[i]);\n            } else {\n                tasksParent.append(this.tasks[i].createTaskNode());\n            }\n        }\n        if (existTasks[i]) {\n            for (i; i < existTasks.length; i++) {\n                existTasks[i].remove();\n            }\n        }\n    }\n}\n\n\nclass Task {\n    constructor(id, text, status = false) {\n        this.id = id;\n        this.text = text;\n        this.status = status;\n    }\n\n    createTaskNode() {\n        const node = this;\n        let taskDiv = document.createElement(\"div\");\n        taskDiv.setAttribute(\"class\", \"task\");\n        let finishButton = document.createElement(\"input\");\n        finishButton.setAttribute(\"type\", \"button\");\n        finishButton.setAttribute(\"class\", \"task_finish_button\");\n\n        if (this.status === false) {\n            finishButton.setAttribute(\"value\", \"Выполнено\");\n        } else {\n            finishButton.setAttribute(\"value\", \"Не выполнено\");\n            taskDiv.setAttribute(\"class\", \"task finished_task\");\n        }\n        finishButton.onclick = function () {\n            taskList.finishTask(node);\n        };\n\n        let removeButton = document.createElement(\"input\");\n\n        removeButton.setAttribute(\"type\", \"button\");\n        removeButton.setAttribute(\"value\", \"Удалить\");\n        removeButton.setAttribute(\"class\", \"task_remove_button\");\n        removeButton.onclick = function () {\n            taskList.removeTask(node);\n        };\n\n        let par = document.createElement(\"p\");\n\n        par.append(this.text);\n        par.setAttribute(\"class\", \"paragraph\");\n        taskDiv.append(finishButton);\n        taskDiv.append(par);\n        taskDiv.append(removeButton);\n\n        return taskDiv;\n    }\n\n    replaceTaskNode(existTask) {\n        const node = this;\n        let finishButton = existTask.getElementsByClassName(\"task_finish_button\")[0];\n        let removeButton = existTask.getElementsByClassName(\"task_remove_button\")[0];\n        existTask.getElementsByTagName(\"p\")[0].textContent = this.text;\n        if (this.status === false) {\n            finishButton.setAttribute(\"value\", \"Выполнено\");\n            existTask.setAttribute(\"class\", \"task\");\n        } else {\n            finishButton.setAttribute(\"value\", \"Не выполнено\");\n            existTask.setAttribute(\"class\", \"task finished_task\");\n        }\n        finishButton.onclick = function () {\n            taskList.finishTask(node);\n        };\n        removeButton.onclick = function () {\n            taskList.removeTask(node);\n        };\n    }\n}\n\n//todo\n// create login class (functions onLad, login, switchLogin, userRegister)\n\n\n\nfunction onLoad(userName) {\n    /**\n     * POST: userName = 'string'\n     * GET:\n     * if OK = true: json = {'ok': 'boolean', 'user_id': 'number', 'tasks': [\n     *                                          {'user_id': 'number', 'task_text': 'string', 'status': 'string'},\n     *                                          ...\n     *                                          ]\n     *             }\n     * if OK = false: json = {'ok': 'boolean', 'error_code': 'number' or null,\n     * 'error_message': 'string' or null}\n     */\n    let sendData = {'userName': userName};\n    function loadTasks(answer) {\n    let menu = document.getElementById(\"auth_menu\");\n    let infoMessage = document.getElementById('login_form_info');\n\n    if (answer['ok'] === true) {\n        menu.style.opacity = '0%';\n        setTimeout(function() {\n            menu.style.display = 'none';\n            document.getElementById('task_input_field').focus();\n            }, 500);\n        let userId = answer['user_id'];\n        let tasksFromServer = answer['tasks'];\n\n        taskList.userId = userId;\n        for (let task of tasksFromServer) {\n            taskList.tasks.push(new Task(task[\"task_id\"], task[\"task_text\"], task[\"status\"]));\n        }\n        taskList.updateDom();\n    } else {\n        infoMessage.textContent = 'Проблема(((((';\n        }\n    }\n    knock_knock('load', sendData, loadTasks);\n}\n\nfunction switchLogin(val) {\n    let loginWindow = document.getElementById('login_form');\n    let registerButton = document.getElementById('register_button');\n    let registerWindow = document.getElementById('register_form');\n    let loginButton = document.getElementById('login_button');\n\n\n    if (val === 'register') {\n        windowChange(registerWindow, loginButton, loginWindow, registerButton);\n    } else if (val === 'login') {\n        windowChange(loginWindow, registerButton, registerWindow, loginButton);\n    }\n\n        function windowChange(activate, activateButton, deactivate, deactivateButton) {\n        deactivate.style.opacity = '0%';\n        deactivateButton.disabled = true;\n        activate.style.display = 'block';\n        setTimeout(function () {\n            activate.style.opacity = '100%';\n        })\n        setTimeout(function () {\n            deactivate.style.display = 'none';\n            activateButton.disabled = false;\n        }, 500);\n    }\n}\n\nfunction loginButton() {\n    /**\n     * POST: json =  {userName: 'string'}\n     * GET: answer = json = {'ok': 'boolean', 'error_code': 'number' or null,\n     'error_message': 'string' or null}\n     */\n    let userName = document.getElementById(\"login_field\").value;\n    document.getElementById(\"login_field\").value = '';\n    let infoMessage = document.getElementById('login_form_info');\n    let sendData = {'userName': userName};\n\n    function login(answer) {\n        if (answer['ok'] === true) {\n        onLoad(userName);\n        } else {\n        infoMessage.textContent = 'Авторизация не удалась =(';\n        }\n    }\n    knock_knock('login', sendData, login);\n}\n\nfunction userRegisterButton() {\n    /**\n     * POST: json =  {newUserName: 'string'}\n     * GET: answer = json = {'ok': 'boolean', 'error_code': 'number' or null,\n     'error_message': 'string' or null}\n     */\n    let infoMessage = document.getElementById(\"register_form_info\");\n    if (document.getElementById('register_form_text').value) {\n        let newUserName = document.getElementById('register_form_text').value;\n        let sendData = {'newUserName': newUserName};\n\n        function register(answer) {\n        if (answer['ok'] === true) {\n            infoMessage.textContent = 'New user ' + newUserName + ' successfully created!';\n        } else if (answer['error_code'] === 1062) {\n            infoMessage.textContent = 'Name ' + newUserName + ' is already used!';\n        } else {\n            infoMessage.textContent = answer['error_message'] + ' Код ошибки: ' + answer['error_code'];\n        }\n    }\n        knock_knock('user_register', sendData, register);\n    } else {\n            infoMessage.textContent = 'Please, enter new user name!';\n            infoMessage.style.color = 'red';\n    }\n}\n\nfunction events() {\n    function noEnterRefresh(event) {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            document.getElementById(\"task_input_button\").click();\n        }\n    }\n\n    let taskInputField = document.getElementById(\"task_input_field\");\n    taskInputField.addEventListener(\"keydown\", noEnterRefresh, false);\n}\n\nfunction knock_knock(path, sendData, func) {\n    let req = new XMLHttpRequest();\n    req.open('POST', 'http://127.0.0.1:5000/' + path);\n    req.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n    req.send(JSON.stringify(sendData));\n\n    req.onreadystatechange = function () {\n        if (req.readyState === 4) {\n            if (req.status === 200 && req.getResponseHeader('Content-type') === 'application/json') {\n                func(JSON.parse(req.responseText));\n            }\n        }\n    }\n}\n\nlet taskList = new TaskList();\nevents();\n"]}